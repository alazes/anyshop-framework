name: Build

on: [push, pull_request]

jobs:
  # Prepare linting/building/testing
  pre-build:
    name: Pre-build
    runs-on: ubuntu-20.04

    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      npm_cache_dir: ${{ steps.npm-cache.outputs.dir }}

    steps:
      - name: Check Duplicate Actions
        id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.3.0

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "12"

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

  # Lint, build and test the code
  # TODO: Add testing
  build:
    name: Build
    runs-on: ubuntu-20.04

    needs: pre-build
    if: ${{ needs.pre-build.outputs.should_skip != 'true' || startsWith(github.ref, 'refs/tags') }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "12"

      - uses: actions/cache@v2
        with:
          path: ${{ needs.pre-build.outputs.npm_cache_dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        run: npm install

      # - name: Linting Typescript code
      #   run: npm run lint:typescript

      - name: Linting ESLint config
        run: npm run lint:eslint-config

      - name: Linting code style format
        run: npm run lint:prettier

      - name: Bootstrapping packages
        run: npm run bootstrap

      - name: Linting @anyshop/core
        run: npx ng lint @anyshop/core

      - name: Building @anyshop/core
        run: npx ng build @anyshop/core --prod

      - name: Linting @anyshop/shared
        run: npx ng lint @anyshop/shared

      - name: Building @anyshop/shared
        run: npx ng build @anyshop/shared --prod

      - name: Linting @anyshop/auth
        run: npx ng lint @anyshop/auth

      - name: Building @anyshop/auth
        run: npx ng build @anyshop/auth --prod

      - name: Upload build artifacts for deployment
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags')
        with:
          name: dist
          path: dist

  # Prepare deployment
  pre-deploy:
    name: Pre-deploy
    runs-on: ubuntu-20.04
    needs: pre-build
    if: startsWith(github.ref, 'refs/tags') # Only trigger deployment on tags

    outputs:
      npm_cache_dir: ${{ needs.pre-build.outputs.npm_cache_dir }}
      package: ${{ steps.get_package_version.outputs.PACKAGE }}
      version: ${{ steps.get_package_version.outputs.VERSION }}

    steps:
      - name: Get the tag
        id: get_tag
        run: |
          echo ::set-output name=tag::${GITHUB_REF/refs\/tags\/\@/}

      - name: Get package and version
        id: get_package_version
        run: |
          echo ::set-output name=PACKAGE::@${TAG/\@*/}
          echo ::set-output name=VERSION::${TAG/*\@/}
        env:
          TAG: ${{ steps.get_tag.outputs.tag }}

  # Run deployment
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    needs: [build, pre-deploy]

    # TODO: Evaluar uso de cach√©
    steps:
      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "12"
          registry-url: "https://registry.npmjs.org"

      - uses: actions/cache@v2
        with:
          path: ${{ needs.pre-deploy.outputs.npm_cache_dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: chrnorm/deployment-action@v1.2.0
        name: Create GitHub deployment
        id: deployment
        with:
          environment: npm@latest
          token: "${{ github.token }}"

      - name: Install dependencies
        run: npm install

      - name: Bootstrapping packages
        run: npm run bootstrap

      # TODO: Remove debug step
      - name: Check npm login
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # TODO: Fix npm auth to allow lerna check access (remove `--no-verify-access`)
      - name: Deploying packages
        # Try to use dist artifact instead of re-build with prepublishOnly hook.
        run: npm run deploy -- --no-verify-access --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v1.0.0
        with:
          token: "${{ github.token }}"
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      # TODO: Check messages for multi-publish deployment
      - name: Notify releases to Slack
        if: success()
        uses: hbfernandes/slack-action@1.0
        with:
          args: |
            {
              "channel": "C01F1D3QAKV",
              "text": "Bump version ${{ needs.pre-deploy.outputs.version }} of :package: ${{ needs.pre-deploy.outputs.package }}",
              "attachments": [
                {
                  "title": "${{ needs.pre-deploy.outputs.package }}",
                  "title_link": "https://www.npmjs.com/package/${{ needs.pre-deploy.outputs.package }}",
                  "text": "v${{ needs.pre-deploy.outputs.version }} published to npm.",
                  "color": "good",
                  "fallback": "${{ needs.pre-deploy.outputs.package }}@${{ needs.pre-deploy.outputs.version }} published to npm"
                }
              ]
            }
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_RELEASE_BOT_OATH_TOKEN }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v1.0.0
        with:
          token: "${{ github.token }}"
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
